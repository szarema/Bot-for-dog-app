import telebot
from telebot import types

bot = telebot.TeleBot('8107411693:AAEZd5Fqas_uaRuJiq_1UB75FRSFM6svMDM')

user_data = {}
user_state = {}

COMMUNITY_CHAT_ID = -1002489234995
COMMUNITY_CHAT_LINK = "https://t.me/+cgUkenl_WqdiYWUy"

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(
        message.chat.id,
        "‚ÑπÔ∏è –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º —Å –±–æ—Ç–æ–º –∏–ª–∏ —á–∞—Ç–æ–º ‚Äî –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @zarema_7"
    )

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_data[chat_id] = {}
    user_state[chat_id] = "waiting_name"
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –∞–Ω–∫–µ—Ç—É –¥–ª—è –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ üê∂. –ö–∞–∫ –∑–æ–≤—É—Ç —Å–æ–±–∞–∫—É?")

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id) == "waiting_name")
def get_pet_name(message):
    chat_id = message.chat.id
    name = message.text.strip()
    if not name:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ–±–∞–∫–∏.")
        return
    user_data[chat_id]['–ò–º—è —Å–æ–±–∞–∫–∏'] = name
    user_state[chat_id] = "waiting_breed"
    bot.send_message(chat_id, "–ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏?")

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id) == "waiting_breed")
def get_breed(message):
    chat_id = message.chat.id
    user_data[chat_id]['–ü–æ—Ä–æ–¥–∞'] = message.text
    user_state[chat_id] = "waiting_age"
    bot.send_message(chat_id, "–í–æ–∑—Ä–∞—Å—Ç?")

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id) == "waiting_age")
def get_age(message):
    chat_id = message.chat.id
    user_data[chat_id]['–í–æ–∑—Ä–∞—Å—Ç'] = message.text
    user_state[chat_id] = "waiting_gender"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–°–∞–º–µ—Ü", "–°–∞–º–∫–∞")
    bot.send_message(chat_id, "–ü–æ–ª —Å–æ–±–∞–∫–∏?", reply_markup=markup)

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id) == "waiting_gender")
def get_gender(message):
    chat_id = message.chat.id
    user_data[chat_id]['–ü–æ–ª'] = message.text
    user_state[chat_id] = "waiting_owner"
    bot.send_message(chat_id, "–ö–∞–∫ –∑–æ–≤—É—Ç —Ö–æ–∑—è–∏–Ω–∞?")

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id) == "waiting_owner")
def get_owner(message):
    chat_id = message.chat.id
    user_data[chat_id]['–•–æ–∑—è–∏–Ω'] = message.text
    user_state[chat_id] = "waiting_city"
    bot.send_message(chat_id, "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id) == "waiting_city")
def get_city(message):
    chat_id = message.chat.id
    user_data[chat_id]['–ì–æ—Ä–æ–¥'] = message.text
    user_state[chat_id] = "waiting_district"
    bot.send_message(chat_id, "–ê —Ä–∞–π–æ–Ω?")

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id) == "waiting_district")
def get_district(message):
    chat_id = message.chat.id
    user_data[chat_id]['–†–∞–π–æ–Ω'] = message.text
    user_state[chat_id] = "waiting_photo"
    bot.send_message(chat_id, "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø–∏—Ç–æ–º—Ü–∞ üêï")

@bot.message_handler(content_types=['photo'])
def get_photo(message):
    chat_id = message.chat.id
    state = user_state.get(chat_id)

    if state == "waiting_photo":
        user_data[chat_id]['–§–æ—Ç–æ'] = message.photo[-1].file_id
        user_state[chat_id] = "waiting_description"
        bot.send_message(chat_id, "–î–æ–±–∞–≤—å—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ –ø–∏—Ç–æ–º—Ü–µ:")
    elif state == "editing_photo":
        user_data[chat_id]['–§–æ—Ç–æ'] = message.photo[-1].file_id
        bot.send_message(chat_id, "–§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")
        show_main_menu(chat_id)
        send_profile(chat_id)
        user_state[chat_id] = None

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id) == "waiting_photo", content_types=['text', 'document', 'video'])
def wrong_photo_format(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "‚ùå –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

@bot.message_handler(func=lambda msg: user_state.get(msg.chat.id) == "waiting_description", content_types=['text'])
def get_description(message):
    chat_id = message.chat.id
    user_data[chat_id]['–û–ø–∏—Å–∞–Ω–∏–µ'] = message.text
    user_state[chat_id] = None
    show_main_menu(chat_id)
    send_profile(chat_id)
    # —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
    bot.send_message(chat_id, f"üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏ —Å–æ–±–∞–∫ –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ:\n{COMMUNITY_CHAT_LINK}")
    # —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    bot.send_message(COMMUNITY_CHAT_ID, "üëã –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π—Ç–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞—à–µ–≥–æ —á–∞—Ç–∞!")
    send_profile(COMMUNITY_CHAT_ID, user_id=chat_id)

def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—É", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "üóë –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

def send_profile(chat_id, user_id=None):
    if user_id is None:
        user_id = chat_id
    data = user_data.get(user_id)
    if not data:
        bot.send_message(chat_id, "–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    profile = (
        f"üê∂ <b>–ò–º—è:</b> {data['–ò–º—è —Å–æ–±–∞–∫–∏']}\n"
        f"üìñ <b>–ü–æ—Ä–æ–¥–∞:</b> {data['–ü–æ—Ä–æ–¥–∞']}\n"
        f"üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {data['–í–æ–∑—Ä–∞—Å—Ç']}\n"
        f"‚öß <b>–ü–æ–ª:</b> {data['–ü–æ–ª']}\n"
        f"üë§ <b>–•–æ–∑—è–∏–Ω:</b> {data['–•–æ–∑—è–∏–Ω']}\n"
        f"üìç <b>–ì–æ—Ä–æ–¥:</b> {data['–ì–æ—Ä–æ–¥']}, {data['–†–∞–π–æ–Ω']}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['–û–ø–∏—Å–∞–Ω–∏–µ']}"
    )
    bot.send_photo(chat_id, data['–§–æ—Ç–æ'], caption=profile, parse_mode='HTML')

@bot.message_handler(func=lambda m: m.text == "üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
def show_profile_again(message):
    send_profile(message.chat.id)

@bot.message_handler(func=lambda m: m.text == "üóë –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
def delete_profile(message):
    chat_id = message.chat.id
    user_data.pop(chat_id, None)
    bot.send_message(chat_id, "–ê–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ üóë")
    show_main_menu(chat_id)

@bot.message_handler(func=lambda m: m.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
def edit_profile(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    fields = {
        "üê∂ –ò–º—è —Å–æ–±–∞–∫–∏", "üìñ –ü–æ—Ä–æ–¥–∞", "üéÇ –í–æ–∑—Ä–∞—Å—Ç", "‚öß –ü–æ–ª",
        "üë§ –•–æ–∑—è–∏–Ω", "üìç –ì–æ—Ä–æ–¥", "üìç –†–∞–π–æ–Ω", "üìù –û–ø–∏—Å–∞–Ω–∏–µ", "üñº –§–æ—Ç–æ"
    }
    for field in fields:
        markup.add(field)
    bot.send_message(chat_id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in {
    "üê∂ –ò–º—è —Å–æ–±–∞–∫–∏", "üìñ –ü–æ—Ä–æ–¥–∞", "üéÇ –í–æ–∑—Ä–∞—Å—Ç", "‚öß –ü–æ–ª",
    "üë§ –•–æ–∑—è–∏–Ω", "üìç –ì–æ—Ä–æ–¥", "üìç –†–∞–π–æ–Ω", "üìù –û–ø–∏—Å–∞–Ω–∏–µ", "üñº –§–æ—Ç–æ"
})
def handle_edit_choice(message):
    chat_id = message.chat.id
    mapping = {
        "üê∂ –ò–º—è —Å–æ–±–∞–∫–∏": "–ò–º—è —Å–æ–±–∞–∫–∏",
        "üìñ –ü–æ—Ä–æ–¥–∞": "–ü–æ—Ä–æ–¥–∞",
        "üéÇ –í–æ–∑—Ä–∞—Å—Ç": "–í–æ–∑—Ä–∞—Å—Ç",
        "‚öß –ü–æ–ª": "–ü–æ–ª",
        "üë§ –•–æ–∑—è–∏–Ω": "–•–æ–∑—è–∏–Ω",
        "üìç –ì–æ—Ä–æ–¥": "–ì–æ—Ä–æ–¥",
        "üìç –†–∞–π–æ–Ω": "–†–∞–π–æ–Ω",
        "üìù –û–ø–∏—Å–∞–Ω–∏–µ": "–û–ø–∏—Å–∞–Ω–∏–µ",
        "üñº –§–æ—Ç–æ": "–§–æ—Ç–æ"
    }
    field = mapping[message.text]
    if field == "–§–æ—Ç–æ":
        user_state[chat_id] = "editing_photo"
        bot.send_message(chat_id, "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø–∏—Ç–æ–º—Ü–∞ üñº")
    else:
        user_state[chat_id] = f"editing_{field}"
        bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ¬´{field}¬ª:")

@bot.message_handler(func=lambda m: user_state.get(m.chat.id, "").startswith("editing_"))
def apply_edit(message):
    chat_id = message.chat.id
    field = user_state[chat_id].replace("editing_", "")
    user_data[chat_id][field] = message.text
    user_state[chat_id] = None
    bot.send_message(chat_id, f"{field} –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")
    show_main_menu(chat_id)
    send_profile(chat_id)

bot.polling(none_stop=True)


